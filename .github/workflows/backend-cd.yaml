name: backend-cd

permissions:
  pull-requests: write
  deployments: write

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/gencare-backend

jobs:
  deploybe:
    if: ${{ !contains(github.event.head_commit.message, '#skipdeploy')}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check disk space
        run: |
          echo "Initial disk space:"
          df -h

      - name: Clean up disk space
        run: |
          echo "Cleaning up Docker system..."
          sudo docker system prune -af --volumes || true
          echo "Removing temporary files..."
          sudo rm -rf /tmp/* || true
          echo "Disk space after cleanup:"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate cache key
        id: cache-key
        run: |
          DOCKERFILE_HASH=$(sha256sum backend/Dockerfile | awk '{print $1}')
          FILES_HASH=$(find backend/ -type f -not -path 'backend/Dockerfile' -exec sha256sum {} + | sort | sha256sum | awk '{print $1}')
          COMBINED_HASH=$(echo "${DOCKERFILE_HASH}${FILES_HASH}" | sha256sum | awk '{print $1}')
          echo "cache-key=$COMBINED_HASH" >> $GITHUB_OUTPUT

      - name: Clear Docker cache before build
        run: |
          echo "Clearing old buildx cache..."
          rm -rf /tmp/.buildx-cache || true

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Tag previous image for rollback
        run: |
          docker pull ${{ env.IMAGE_NAME }}:latest || true
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:previous || true
          docker push ${{ env.IMAGE_NAME }}:previous || true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            CACHEBUST=${{ steps.cache-key.outputs.cache-key }}

      - name: Clean up after build
        run: |
          echo "Cleaning up Docker system..."
          sudo docker system prune -af --volumes || true
          echo "Removing temporary files..."
          sudo rm -rf /tmp/* || true
          echo "Disk space after cleanup:"
          df -h

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            IMAGE=${{ env.IMAGE_NAME }}
            SHA=${{ github.sha }}

            echo "> Fetching secrets from Doppler..."
            DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} doppler secrets download --no-file --format json --project gencare --config prd > /tmp/secrets.json || { echo "Failed to fetch Doppler secrets"; exit 1; }

            echo "> Converting JSON secrets to unquoted env file..."
            jq -r 'to_entries | .[] | "\(.key)=\(.value)"' /tmp/secrets.json > /tmp/env_vars || { echo "Failed to convert secrets to env file"; exit 1; }
            rm -f /tmp/secrets.json

            echo "> Pulling latest image..."
            sudo docker pull $IMAGE:$SHA || { echo "Failed to pull image $IMAGE:$SHA"; exit 1; }

            echo "> Stopping and removing old container..."
            sudo docker stop gencare-backend || true
            sudo docker rm gencare-backend || true

            echo "> Starting new container with Doppler secrets..."
            sudo docker run -d --name gencare-backend -p 8080:8080 --env-file /tmp/env_vars $IMAGE:$SHA || { echo "Failed to start container"; exit 1; }

            echo "> Cleaning up temporary env file..."
            rm -f /tmp/env_vars

            echo "⏳ Waiting for health check..."
            for i in {1..5}; do
              if curl -f http://localhost:8080/health; then
                echo "> Health check passed"
                break
              fi
              echo "Attempt $i failed, retrying in 5 seconds..."
              sleep 5
              if [ "$i" -eq 5 ]; then
                echo "> Health check failed after 5 attempts, rolling back..."
                sudo docker logs gencare-backend
                sudo docker stop gencare-backend || true
                sudo docker rm gencare-backend || true
                echo "> Pulling previous image..."
                sudo docker pull $IMAGE:previous || { echo "> Failed to pull previous image"; exit 1; }
                echo "> Starting previous container with Doppler secrets..."
                DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} doppler secrets download --no-file --format json --project gencare --config prd > /tmp/secrets.json || { echo "> Failed to fetch Doppler secrets for rollback"; exit 1; }
                jq -r 'to_entries | .[] | "\(.key)=\(.value)"' /tmp/secrets.json > /tmp/env_vars || { echo "> Failed to convert secrets to env file for rollback"; exit 1; }
                rm -f /tmp/secrets.json
                sudo docker run -d --name gencare-backend -p 8080:8080 --env-file /tmp/env_vars $IMAGE:previous || { echo "> Failed to start previous container"; exit 1; }
                rm -f /tmp/env_vars
                exit 1
              fi
            done

            echo "🧹 Pruning unused Docker images..."
            sudo docker images "$IMAGE" --format "{{.Repository}}:{{.Tag}}" \
              | grep -v -E "(:${SHA}|:previous)" \
              | xargs -r sudo docker rmi -f || true

            echo "✅ Deployment complete."
