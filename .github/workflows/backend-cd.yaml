name: backend-cd

permissions:
  pull-requests: write
  deployments: write

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/gencare-backend

jobs:
  deploybe:
    if: ${{ !contains(github.event.head_commit.message, '#skipdeploy')}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-dotnet8-${{ hashFiles('backend/**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-dotnet8-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate cache key
        id: cache-key
        run: |
          DOCKERFILE_HASH=$(sha256sum backend/Dockerfile | awk '{print $1}')
          FILES_HASH=$(find backend/ -type f -not -path 'backend/Dockerfile' -exec sha256sum {} + | sort | sha256sum | awk '{print $1}')
          COMBINED_HASH=$(echo "${DOCKERFILE_HASH}${FILES_HASH}" | sha256sum | awk '{print $1}')
          echo "cache-key=$COMBINED_HASH" >> $GITHUB_OUTPUT

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Tag previous image for rollback
        run: |
          docker pull ${{ env.IMAGE_NAME }}:latest || true
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:previous || true
          docker push ${{ env.IMAGE_NAME }}:previous || true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            CACHEBUST=${{ steps.cache-key.outputs.cache-key }}

            - name: Deploy to EC2
            uses: appleboy/ssh-action@v1.0.0
            with:
              host: ${{ secrets.EC2_HOST }}
              username: ${{ secrets.EC2_USER }}
              key: ${{ secrets.EC2_KEY }}
              script: |
                IMAGE=${{ env.IMAGE_NAME }}
                SHA=${{ github.sha }}

                echo "üîÑ Pulling latest image..."
                sudo docker pull $IMAGE:$SHA

                echo "üõë Stopping and removing old container..."
                sudo docker stop gencare-backend || true
                sudo docker rm gencare-backend || true

                echo "üöÄ Starting new container..."
                sudo docker run -d --name gencare-backend -p 8080:8080 --env-file .env $IMAGE:$SHA

                echo "‚è≥ Waiting for health check..."
                sleep 10
                if ! curl -f http://localhost:8080/health; then
                  echo "‚ùå Health check failed, rolling back..."
                  sudo docker stop gencare-backend || true
                  sudo docker rm gencare-backend || true
                  sudo docker pull $IMAGE:previous || exit 1
                  sudo docker run -d --name gencare-backend -p 8080:8080 $IMAGE:previous || exit 1
                  exit 1
                fi

                echo "üßπ Pruning unused Docker images..."
                # Delete all but current and previous
                sudo docker images "$IMAGE" --format "{{.Repository}}:{{.Tag}} {{.ID}}" \
                  | grep -v -E "(:${SHA}|:previous)" \
                  | awk '{print $2}' \
                  | xargs -r sudo docker rmi -f

                echo "‚úÖ Deployment complete."
