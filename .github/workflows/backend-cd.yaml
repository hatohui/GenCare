name: backend-cd

permissions:
  pull-requests: write
  deployments: write

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/gencare-backend

jobs:
  deploybe:
    if: ${{ !contains(github.event.head_commit.message, '#skipdeploy')}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag previous image for rollback
        run: |
          docker pull ${{ env.IMAGE_NAME }}:latest || true
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:previous || true
          docker push ${{ env.IMAGE_NAME }}:previous || true

      - name: Pull and retag CI-built image
        run: |
          docker pull ${{ env.IMAGE_NAME }}:ci-${{ github.sha }} || { echo "‚ùå Failed to pull CI-built image"; exit 1; }
          docker tag ${{ env.IMAGE_NAME }}:ci-${{ github.sha }} ${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:ci-${{ github.sha }} ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            IMAGE=${{ env.IMAGE_NAME }}
            SHA=${{ github.sha }}

            echo "üîÑ Fetching secrets from Doppler..."
            DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} doppler secrets download --no-file --format env --project gencare --config prd > /tmp/env_vars || { echo "‚ùå Failed to fetch Doppler secrets"; exit 1; }

            echo "üîÑ Pulling latest image..."
            sudo docker pull $IMAGE:$SHA || { echo "‚ùå Failed to pull image $IMAGE:$SHA"; exit 1; }

            echo "üõë Stopping and removing old container..."
            sudo docker stop gencare-backend || true
            sudo docker rm gencare-backend || true

            echo "üöÄ Starting new container with Doppler secrets..."
            sudo docker run -d --name gencare-backend -p 8080:8080 --env-file /tmp/env_vars $IMAGE:$SHA || { echo "‚ùå Failed to start container"; exit 1; }

            echo "üßπ Cleaning up temporary env file..."
            rm -f /tmp/env_vars

            echo "‚è≥ Waiting for health check..."
            for i in {1..5}; do
              if curl -f http://localhost:8080/health; then
                echo "‚úÖ Health check passed"
                break
              fi
              echo "Attempt $i failed, retrying in 5 seconds..."
              sleep 5
              if [ "$i" -eq 5 ]; then
                echo "‚ùå Health check failed after 5 attempts, rolling back..."
                sudo docker logs gencare-backend
                sudo docker stop gencare-backend || true
                sudo docker rm gencare-backend || true
                echo "üîÑ Pulling previous image..."
                sudo docker pull $IMAGE:previous || { echo "‚ùå Failed to pull previous image"; exit 1; }
                echo "üöÄ Starting previous container with Doppler secrets..."
                DOPPLER_TOKEN=${{ secrets.DOPPLER_TOKEN }} doppler secrets download --no-file --format env --project gencare --config prd > /tmp/env_vars || { echo "‚ùå Failed to fetch Doppler secrets for rollback"; exit 1; }
                sudo docker run -d --name gencare-backend -p 8080:8080 --env-file /tmp/env_vars $IMAGE:previous || { echo "‚ùå Failed to start previous container"; exit 1; }
                rm -f /tmp/env_vars
                exit 1
              fi
            done

            echo "üßπ Pruning unused Docker images..."
            sudo docker images "$IMAGE" --format "{{.Repository}}:{{.Tag}} {{.ID}}" \
              | grep -v -E "(:${SHA}|:previous)" \
              | awk '{print $2}' \
              | xargs -r sudo docker rmi -f || true

            echo "‚úÖ Deployment complete."
