name: backend-cd

permissions:
  pull-requests: write
  deployments: write

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/gencare-backend

jobs:
  deploybe:
    if: ${{ !contains(github.event.head_commit.message, '#skipdeploy')}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate cache key
        id: cache-key
        run: |
          DOCKERFILE_HASH=$(sha256sum backend/Dockerfile | awk '{print $1}')
          FILES_HASH=$(find backend/ -type f -not -path 'backend/Dockerfile' -exec sha256sum {} + | sort | sha256sum | awk '{print $1}')
          COMBINED_HASH=$(echo "${DOCKERFILE_HASH}${FILES_HASH}" | sha256sum | awk '{print $1}')
          echo "cache-key=$COMBINED_HASH" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha,scope=main
          cache-to: type=gha,mode=max,scope=main
          build-args: |
            CACHEBUST=${{ steps.cache-key.outputs.cache-key }}

      - name: Deploy to EC2
        if: ${{ !env.SKIP_DEPLOYMENT }}
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Pull new image
            docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
            # Stop and remove existing container
            docker stop gencare-backend || true
            docker rm gencare-backend || true
            # Tag previous image for rollback
            docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:previous || true
            # Run new container
            docker run -d --name gencare-backend -p 8080:8080 ${{ env.IMAGE_NAME }}:${{ github.sha }}
            # Health check
            sleep 10
            if ! curl -f http://localhost:8080/health; then
              echo "Health check failed, rolling back..."
              docker stop gencare-backend || true
              docker rm gencare-backend || true
              docker run -d --name gencare-backend -p 8080:8080 ${{ env.IMAGE_NAME }}:previous || exit 1
              exit 1
            fi
            # Clean up old images
            docker image prune -f
